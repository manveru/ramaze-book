= Tutorial introduction to Ramaze

== Installation

The easiest way to get to know Ramaze is by example, so we'll start out with that, covering installation and a few simple applications so you can get a feel for it.

In order to use Ramaze, you will have to install it on your system. This is usually fairly straight forward.

=== Checking for and Installing Ruby

Before we install Ramaze, we need to ensure your system has Ruby, since Ramaze is written in the Ruby programming language.  Ruby doesn't ship by default with most systems, so you will likely have to install it first.

Check your system for Ruby with this command:

[source,sh]
----
$ ruby --version
----

If you see output similar to this, you're good to go:
[source,sh]
----
ruby 1.9.1p0 (2009-01-30 revision 21907) [i686-linux]
----

If you see a "command not found" error, or you see a version less than 1.9.1, you'll need to install or upgrade Ruby.

For this book we assume an installation of Ruby 1.9.x, which ships withRubyGems, the package manager for Ruby libraries and applications.

As of May 2016, the latest version of Ruby is 2.2.2, but Linux distributions have been slow to pick up the newest version. In Linux Mint 17.3 "Qiana" (Ubuntu 14.04), the version of Ruby in the official distribution was still 1.9.1. If your system distribution doesn't have the latest version of Ruby, you'll have to install it from {ruby-lang}.

Ramaze will remain compatible with Ruby back to version 1.9.x, and back to 1.8.6 as long as is practical, but you would be strongly advised to update your Ruby to at least 1.9.1.


=== Installing Ramaze

Once Ruby is installed correctly, you can install Ramaze simply by:

[source,sh]
----
$ gem install ramaze
----

This will take care of installing all dependencies as well. There are a lot of libraries that we will install in the course of this book, but installing them is usually just a command away, so we defer it to when we actually need them.

Ramaze is an open-source project that is developed by a community of Ramaze enthusiasts. In order to work together, we utilize git for revision control. You can obtain your own copy of the repository if you are interested in helping the development, or simply would like to browse through the project history. We will cover this subject in {ch-developing}.

== Hello, World!

Following tradition, let's build a "Hello, World" example application. Create a file called hello.rb, and put this into it, and save it.

[source,ruby]
----
include::source/tutorial_introduction/hello_world.rb[tabsize=2]
----

To start this application we can now simply use the command:

[source,sh]
----
$ ruby hello.rb
----

This is what you'll see when Ramaze starts:

[source,txt]
----
include::source/tutorial_introduction/start_output.txt[tabsize=2]
----

You can see some interesting information here:

  - We got an warning `No explicit root folder found` message, which you can ignore. All it says is that we didn't define a special "starting" file.
  - We're using webrick as the HTTP server.
  - We're running Ruby 1.9.3.
  - The server is running on localhost (127.0.0.1), port 7000 (Ramaze's default).
  - The PID for this running server is 5011. 

Now, start your browser and enter `localhost:7000` into the address bar, and this should display, showing that the hello.rb application is running.

[source,html]
----
Hello, World
----

Now that you've entered and run your first Ramaze application, you can see how simple it is to build one.

.Let's take a look at the source
  - First we require Ramaze, the ramaze library and framework.
  - Next we define a Controller. The usual convention is to give the controller a name, followed by 'Controller'. You're not required to follow this convention, but it makes reading code easier. So, let's use HelloController here.
  - Then we use the `map` call to define this controller as the root controller. If this call is omitted, since there is no "MainController," this controller will default to the root controller. We're just adding this for clairity. We'll cover more on routing in another chapter.
  - The next 3 lines define the index method (which is the default). The "Hello, World" string is returned by the index method, and Ramaze sends that back to the browser. We'll cover controllers and views in another chapter also.
  - The last statement will start an instance of Ruby and start the WEBrick HTTP server that ships with Ruby.

Sometimes when you run your application, you'll get an error when starting Ramaze that looks like:

[source,txt]
----
include::source/tutorial_introduction/start_eaddrinuse.txt[tabsize=2]
----

This means that you already have a server running on this port, and you will have to use another port to run your application or shutdown the application occupying the port.

If you don't know what is running on this port, you can find out by using the 'netstat' command.

The invocation of 'netstat' differs on Windows an Linux, we'll show Linux first.

[source,txt]
----
$ netstat -lntp
(Not all processes could be identified, non-owned process info
 will not be shown, you would have to be root to see it all.)
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
  ...
tcp        0      0 127.0.0.1:7000          0.0.0.0:*               LISTEN      6957/ruby
  ...
----

With this information you know the Process ID, and can, for example `kill -s abrt 6957` (send SIGABRT signal to the process) on Linux. Note that a `kill 6957` would be trapped by Ramaze, and Ramaze would not shutdown.

On Windows, 'netstat' has to be called like this:

[source,txt]
----
C:\> netstat -a -b -o -p TCP
Active Connections
 Proto  Local Address          Foreign Address        State           PID
 TCP    localhost:7000         localhost:0            LISTENING       17806 [ruby.exe]
----

Now you can use `taskkill /PID 17806` or `taskkill /IM <process_name>` to get rid of this process.


== The ramaze command

Ramaze ships with an executable called 'ramaze'. You've probably guessed that a Ramaze application can be simple, like the hello.rb application above, but to build a complex project, you'll need more. This little tool helps you to create your applications with everything you'll need to get started on a full scale Ramaze project, and it does it in seconds.

From now on, we will call the 'ramaze' executable 'bin/ramaze' because that's what it's commonly called in the Ramaze community.

.Getting help with bin/ramaze

To get help, just use `ramaze --help`. To get help with a command, use `ramaze <command> --help`. For example, this is what you get when you ask for help with `ramaze create --help`:

[source,sh]
----
$ ramaze create --help
Allows developers to easily create new Ramaze applications based on the
prototype that ships with Ramaze.

Usage:
  ramaze create [NAME] [OPTIONS]

Example:
  ramaze create --help # this message
  ramaze create blog # create a project named blog
  ramaze create blog -a mysql2 -d blog_dev -u bloguser -p dFLaWp3uts97pFwcdz7 # same, but with database

Options:
  -a, --adapter adapter            Specifies the database adapter name [no default]
  -s, --server server              Specifies the database server(host) name [default: localhost]
  -d, --dbname dbname              Specifies the database dbname [default: your_dbname]
  -u, --username username          Specifies the database username [default: your_username]
  -p, --password password          Specifies the database password [default: your_password]
  -f, --force                      Overwrites existing directories
  -h, --help                       Shows this help message
----

.Getting the Ramaze version

Just use the -v or --version option:

[source,sh]
----
$ ramaze -v
2016.05.17
----


=== Creating Projects with bin/ramaze

To create a new application with a basic set of files and directories that get you started in no time, you just have to issue a single command. There's three kinds of projects you can create:

  - A plain web application with no database support;
  - A web application with MySQL and Sequel support; or 
  - A web application with Sqlite and Sequel support.

.Note: PostgreSQL coming soon
Support for building projects with PostgreSQL is coming soon, but for now, you can build a MySQL project and modify the model/init.rb file to open a PostgreSQL database instead of MySQL.

.Creating a non-database Ramaze project

To build a non-database Ramaze project, simply change directories to the place where you want to create the new project, then use

[source,sh]
----
$ ramaze create <project-name>
----

There are no options.

.Creating a Ramaze project with MySQL support

To build a Ramaze project with MySQL support built in, you'll need to have:

  - MySQL installed and running on some computer.
  - A database already created (see the MySQL documentation for that).
  - (optionally) the `host` address or name of the MySQL server; for example, it may be `localhost`, or another machine on your local network like `192.168.1.2`, or a name from your /etc/hosts file like `server`, or any other location for which you have a valid URL. The default for this parameter is `localhost`, which is most commonly what people want.
  - The name of the database.
  - The username for the logon which Sequel will use.
  - The password for the logon.

To build a MySQL Ramaze project, simply change directories to the place where you want to create the new project, then use

[source,sh]
----
$ ramaze create <project-name> -a mysql2 <options>
----

For example,

[source,sh]
----
$ ramaze create blog -a mysql2 -d blog_dev -u bloguser -p dFLaWp3uts97pFwcdz7
----

If the database is active, the first time you run your new project, the main screen will verify if the connection was made.



.Creating a Ramaze project with Sqlite3 support

To build a Ramaze project with Sqlite3 support built in, you'll need to have:

  - Sqlite3 installed on your computer.
  - The name of the database.

To build a Sqlite Ramaze project, simply change directories to the place where you want to create the new project, then use

[source,sh]
----
$ ramaze create <project-name> -a sqlite <options>
----

For example,

[source,sh]
----
$ ramaze create blog -a sqlite -d blog_dev
----

.Caveats
[WARNING]
====
  - If the database name you give Sqlite doesn't exist, it'll create the database, but it won't be saved until some permanent change is made to it. What this means is, if you make a mistake in the name, you'll find an empty database (which can be disconcerting if you expected to find data), and if you save important data, it'll go to the incorrectly-named database instead of the one you actually wanted.
  - If you have an existing database, specify `-d <full-path-name>`. If you don't give a pathname, the database will be created at the root of your project. If you put data in it, then delete and re-create your project, the database will be deleted also, and you'll lose the data you put in.
  - If you back up your project with git, and you let the database be created inside the project, git can back it up for you.
====

